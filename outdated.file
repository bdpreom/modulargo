package main

import (
	"encoding/json"
	"io/ioutil"
	"net/http"
	"strings"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/rs/xid"
)

type Recipe struct {
	ID           string    `json:"id"`
	Name         string    `json:"name"`
	Tags         []string  `json:"tags"`
	Ingredients  []string  `json:"ingredients"`
	Instructions []string  `json:"instructions"`
	PublishedAt  time.Time `json:"publishedAt"`
}

// type Person struct {
// 	XMLName   xml.Name `xml:"person"`
// 	FirstName string   `xml:"firstName,attr"`
// 	LastName  string   `xml:"lastName,attr"`
// }

// func IndexHandler(c *gin.Context) {
// 	name := c.Param("name")
// 	c.JSON(200, gin.H{"message": "Hello!" + name})
// 	c.XML(200,Person{FirstName: "shadman", LastName: "sakib"})
// }

// func init() {
// 	recipes = make([]Recipe, 0)
// 	file, _ := ioutil.ReadFile("recipes.json")
// 	_ = json.Unmarshal([]byte(file), &recipes)
// 	}

func init() {

	//bulk updates
	recipes = make([]Recipe, 0)
	file, _ := ioutil.ReadFile("recipes.json")
	_ = json.Unmarshal([]byte(file), &recipes)

	



}

var recipes []Recipe

func NewRecipeHandler(c *gin.Context) {
	var recipe Recipe
	if err := c.ShouldBindJSON(&recipe); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	recipe.ID = xid.New().String()
	recipe.PublishedAt = time.Now()
	recipes = append(recipes, recipe)
	c.JSON(http.StatusOK, recipe)

}

func ListRecipesHandler(c *gin.Context) {
	c.JSON(http.StatusOK, recipes)
}

func UpdateRecipeHandler(c *gin.Context) {
	id := c.Param("id")
	var recipe Recipe
	if err := c.ShouldBindJSON(&recipe); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": err.Error()})
		return
	}
	index := -1
	for i := 0; i < len(recipes); i++ {
		if recipes[i].ID == id {
			index = i
		}
	}

	if index == -1 {
		c.JSON(http.StatusNotFound, gin.H{"error": "Recipe not found"})
		return
	}

	recipes[index] = recipe
	c.JSON(http.StatusOK, recipe)

}

func DeleteRecipeHandler(c *gin.Context) {
	id := c.Param("id")
	index := -1
	for i := 0; i < len(recipes); i++ {
		if recipes[i].ID == id {
			index = i
		}
	}
	if index == -1 {
		c.JSON(http.StatusNotFound, gin.H{
			"error": "Recipe not found"})
		return
	}
	recipes = append(recipes[:index], recipes[index+1:]...)
	c.JSON(http.StatusOK, gin.H{"message": "Recipe has been deleted"})
}

func SearchRecipesHandler(c *gin.Context) {
	tag := c.Query("tag")
	listOfRecipes := make([]Recipe, 0)
	for i := 0; i < len(recipes); i++ {
		found := false
		for _, t := range recipes[i].Tags {
			if strings.EqualFold(t, tag) {
				found = true
			}
		}

		if found {
			listOfRecipes = append(listOfRecipes, recipes[i])
		}

	}

	c.JSON(http.StatusOK, listOfRecipes)

}

func main() {

	LoadAppConfig()

	router := gin.Default()
	//router.GET("/", IndexHandler)
	//router.GET("/:name", IndexHandler)
	router.POST("/recipes", NewRecipeHandler)
	router.GET("/recipes", ListRecipesHandler)
	router.PUT("/recipes/:id", UpdateRecipeHandler)
	router.DELETE("/recipes/:id", DeleteRecipeHandler)
	router.GET("/recipes/search", SearchRecipesHandler)
	router.Run()

}


func NewRecipeHandler(ctx context.Context, collection *mongo.Collection, redisClient *redis.Client) *RecipesHandler {
	var recipe models.Recipe
	if err := c.ShouldBindJSON(&recipe); err != nil {c.JSON(http.StatusBadRequest,gin.H{"error": err.Error())
	return
    }
	recipe.ID = primitive.NewObjectID()
	recipe.PublishedAt = time.Now()
	_, err = collection.InsertOne(ctx, recipe)
	if err != nil {
		fmt.Println(err)
	c.JSON(http.StatusInternalServerError,gin.H{"error": "Error while inserting a new recipe"})
	return
	}

	c.JSON(http.StatusOK, recipe)
}


===
// var recipes []models.Recipe
// var Client *mongo.Client = database.DBSet()

// func bulkload() {
// 	recipes = make([]models.Recipe, 0)
// 	file, _ := ioutil.ReadFile("recipes.json")
// 	_ = json.Unmarshal([]byte(file), recipes)
// 	//json file loaded into recipes

// 	var listOfRecipes []interface{} //db range loaded here
// 	for _, recipe := range recipes {
// 		listOfRecipes = append(listOfRecipes, recipe)
// 	}
// 	collection := Client.Database("shadman").Collection("recipes")
// 	var ctx, cancel = context.WithTimeout(context.Background(), 5*time.Second)
// 	defer cancel()
// 	intestManyResult, err := collection.InsertMany(ctx, listOfRecipes)
// 	if err != nil {
// 		log.Fatal(err)
// 	}
// 	log.Println("Inserted recipes: ", len(intestManyResult.InsertedIDs))

// }
====


func AuthMiddleware() gin.HandlerFunc {
return func(c *gin.Context) {
if c.GetHeader("X-API-KEY") !=
os.Getenv("X_API_KEY") {
c.AbortWithStatus(401)
}
c.Next()
}
}

authorized := router.Group("/")
authorized.Use(AuthMiddleware()){
authorized.POST("/recipes",
recipesHandler.NewRecipeHandler)
authorized.GET("/recipes",
recipesHandler.ListRecipesHandler)
authorized.PUT("/recipes/:id",
recipesHandler.UpdateRecipeHandler)
 
authorized.DELETE("/recipes/:id",
recipesHandler.DeleteRecipeHandler)
}


===
import (
    "context"
    "fmt"
    "go.mongodb.org/mongo-driver/mongo"
    "go.mongodb.org/mongo-driver/mongo/options"
    "log"
)

type Person struct {
    Name string
    Age  int
}

func main() {
    clientOptions := options.Client().ApplyURI("mongodb://localhost:27017")
    client, err := mongo.Connect(context.Background(), clientOptions)
    if err != nil {
        log.Fatal(err)
    }
    defer client.Disconnect(context.Background())

    coll := client.Database("test").Collection("people")
    people := []interface{}{
        Person{Name: "John", Age: 30},
        Person{Name: "Jane", Age: 25},
        Person{Name: "Bob", Age: 40},
    }
    result, err := coll.InsertMany(context.Background(), people)
    if err != nil {
        log.Fatal(err)
    }
    fmt.Printf("Inserted %v documents\n", len(result.InsertedID